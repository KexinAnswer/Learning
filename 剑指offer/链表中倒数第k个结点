链表中倒数第k个结点

输入一个链表，输出该链表中倒数第k个结点。

/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
        if(pListHead == NULL){
            return NULL;
        }
        ListNode* cur = pListHead;
        int count = 0;
		// 遍历整个链表 得到链表的节点个数
        while(cur != NULL){
            cur = cur->next;
            count++;
        }
		//重新从头开始遍历
        cur = pListHead;  
        if(k > count){
            return NULL;
        }
		
		// 找到 倒数第 K 个节点
        for(int i = 0; i < count - k; ++i){
            cur = cur->next;
        }
        
        return cur;
    }
};


class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
        // 如果为空链表 直接返回NULL
        if(pListHead == NULL){
            return NULL;
        }
        
        // 创建两个指针 让第一个指针先走 k 个节点之后 第二个指针从链表开头开始走，
        // 两个指针相差 k 个节点， 当第一个指针走到链表结束，返回第二个指针
        ListNode* fast_cur = pListHead;
        ListNode* slow_cur = pListHead;
        while(k){
            // 出现空指针越界 直接返回 NULL
            if(fast_cur == NULL){
                return NULL;
            }
            fast_cur = fast_cur->next;
            k--;
        } // end while
        
        // fast_cur 领先 slow_cur k 个节点 两个指针一起走
        while(fast_cur != NULL){
            fast_cur = fast_cur->next;
            slow_cur = slow_cur->next;
        }
        
    return slow_cur;
    }
};
