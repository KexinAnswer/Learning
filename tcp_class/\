#pragma once
#include "tcp_socket.hpp"
#include <functional>

#define CHECK_RET(exp) if(!(exp)){ \
  return false; \
}


typedef std::function<void(const std::string& req, std::string* resp)>Handler;

class TcpProcessServer{
public:
  bool Start(const std::string& ip, uint16_t port, Handler handler){
    // 1. 创建一个 socket
    CHECK_RET(listen_socket_.Socket());
    // 2. 绑定 ip 和 端口号
    CHECK_RET(listen_socket_.Bind(ip,port));
    // 3. 进行监听
    CHECK_RET(listen_socket_.Listen());
    printf("Server Start!\n");
    // 4. 进入主循环
    while(true){
      TcpSocket client_socket;
      std::string ip;
      uint16_t port;
      bool ret = listen_socket_.Accept(&client_socket,&ip,&port);
      if(!ret){
        continue;
      }
      printf("[%s:%d]客户端建立了连接！\n", ip.c_str(),port);
      ProcessConnect(client_socket,handler,  ip, port);
    }
  }


private:
  TcpSocket listen_socket_;
};
