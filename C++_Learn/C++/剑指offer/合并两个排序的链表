合并两个排序的链表

输入两个单调递增的链表，输出两个链表合成后的链表，
当然我们需要合成后的链表满足单调不减规则。


// 非递归版本
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1 == NULL){
            return pHead2;
        }
        
        if(pHead2 == NULL){
            return pHead1;
        }
        
        ListNode* newHead = NULL;
        ListNode* node = NULL;
        while(pHead1 != NULL && pHead2 != NULL){
            if(pHead1->val <= pHead2->val){
                if(newHead == NULL){
                    newHead = pHead1;
                    node = newHead;
                } else{
                    node->next = pHead1;
                    node = node->next;
                }
                pHead1 = pHead1->next;
            } else {
                if(newHead == NULL){
                    newHead = pHead2;
                    node = newHead;
                } else{
                    node->next = pHead2;
                    node = node->next;
                }
                pHead2 = pHead2->next;
            } 
        }// end while
        
        if(pHead1 == NULL){
            node->next = pHead2;
        }
        if(pHead2 == NULL){
            node->next = pHead1;
        }
        
        return newHead;
    } // end function
};

/// 递归版本
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1 == NULL){
            return pHead2;
        }
        if(pHead2 == NULL){
            return pHead1;
        }
        ListNode* newHead = NULL;
        if(pHead1->val < pHead2->val){
            newHead = pHead1;
            newHead->next = Merge(pHead1->next,pHead2);
        }else{
            newHead = pHead2;
            newHead->next = Merge(pHead1,pHead2->next);
        }
        
        return newHead;
    }
};
